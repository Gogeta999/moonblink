def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'

// to read android/key.properties
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}
// to read android/key.properties
android {
    //  here is for background fetch
    // compileSdkVersion rootProject.ext.compileSdkVersion
    //  here is for background fetch
    compileSdkVersion 29

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // change minSdkVersion to from 16 to 18 to support webrtc and 21 for background fetch
        applicationId "com.moonuniverse.moonblink"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        //multiDex
        multiDexEnabled true
        // Here is for background fetch
        // targetSdkVersion rootProject.ext.targetSdkVersion
        // Here is for background fetch
    }

    // for upload to playstore
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    // for upload to playstore
    buildTypes {
        release {
            // Signing with the debug keys for now, so `flutter run --release` works.
            //signingConfig signingConfigs.debug
            signingConfig signingConfigs.release
            minifyEnabled false
            useProguard true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.google.firebase:firebase-messaging:20.2.1'
    implementation 'com.google.firebase:firebase-analytics:17.2.2'
    /// Solve My duplicate problem not sure about on your guys' environment
    implementation 'com.google.guava:guava:27.0.1-android'
    // here is for background fetch
    // testImplementation 'junit:junit:4.12'
    // // androidTestImplementation 'com.android.support.test:runner:1.0.2'
    // // androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    // androidTestImplementation 'androidx.test:runner:1.1.1'                   // or higher
    // androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'   // or higher
    // here is for background fetch
}
